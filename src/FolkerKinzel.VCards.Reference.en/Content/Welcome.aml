<?xml version="1.0" encoding="utf-8"?>
<topic id="397502cd-fe45-4dc2-a450-195693e7f902" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>FolkerKinzel.VCards is a full-featured .NET library for working with vCard files (*.vcf).</para>
      <para>It allows</para>
      <list class="bullet">
        <listItem>
          <para>loading VCF files from the file system and storing them there,</para>
        </listItem>
        <listItem>
          <para>serializing VCF files to and from streams,</para>
        </listItem>
        <listItem>
          <para>and interconverting VCF files corresponding to vCard versions 2.1, 3.0, and 4.0.</para>
        </listItem>
      </list>
      <para>
        Parse errors, caused by not well-formed VCF files, are silently ignored by the library: It reads as much as it can from
        such files.
      </para>
      <para>
        The same is for errors caused by incompliant data when serializing the vCard: Because of the different vCard standards
        are not completely compliant, incompliant data is silently ignored when converting from one
        vCard standard to another. To minimize this kind of data loss, the library tries to preserve incompliant data
        using well-known x-name properties. The usage of such x-name properties can be
        controlled.
      </para>
      <autoOutline />

    </introduction>

    <section address="NameSpaces">
      <title>The usage of the namespaces</title>
      <content>
        <para>The following code example provides tips for using the namespaces of the library.</para>
        <code language="c#" source=".\Content\Namespaces.cs"/>
      </content>
    </section>


    <section address="DataModel">
      <title>The data model</title>
      <content>
        <autoOutline/>
        <para>
          The data model used by this library is aligned to the vCard 4.0 standard (RFC 6350). This means that every
          vCard of version 2.1 and 3.0 is internally converted to vCard 4.0. When saved and serialized, they are
          converted back.
        </para>
      </content>
      <sections>
        <section address="VCard">
          <title>The VCard Class</title>
          <content>
            <para>
              A VCF file consists of one or more vCards. The content of a vCard is represented by the 
              <codeInline>VCard</codeInline> class.
            </para>
          </content>
        </section>
        <section address="VCardProperty">
          <title>The VCardProperty Class</title>
          <content>
            <para>
              The data model of the <codeInline>VCard</codeInline> class is built on classes that are derived from the abstract <codeInline>VCardProperty</codeInline> class.
            </para>
            <para>
              <codeInline>VCardProperty</codeInline> exposes the following members:
            </para>
            <code language="c#" source=".\Content\VCardProperty.cs"/>

            <para>This reflects the structure of a data row in a VCF file:</para>
            <para>
              <codeInline>group1.TEL;TYPE=home,voice;VALUE=uri:tel:+49-123-4567</codeInline>
            </para>
            <para>In this example corresponds</para>
            <list class="bullet">
              <listItem>
                <para>
                  <codeInline>group1</codeInline> to VCardProperty.Group,
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>TEL;TYPE=home,voice;VALUE=uri</codeInline> to VCardProperty.Parameters and
                </para>
              </listItem>
              <listItem>
                <para>
                  <codeInline>tel:+49-123-4567</codeInline> to VCardProperty.Value.
                </para>
              </listItem>
            </list>
            <para>
              (Classes that are derived from <codeInline>VCardProperty</codeInline> hide the generic implementation of
              <codeInline>VCardProperty.Value</codeInline> in order to return
              derived classes instead of <codeInline>System.Object</codeInline>.)
            </para>
          </content>
        </section>

        <section address="Unions">
          <title>Unions</title>
          <content>
            <para>
              The vCard standard allows some properties of a vCard to encapsulate different data types.
              The model classes <codeInline>ContactID</codeInline>, <codeInline>Relation</codeInline>, <codeInline>DateAndOrTime</codeInline> and 
              <codeInline>RawData</codeInline> therefore represent unions that can encapsulate different .NET data types.
            </para>
            <para>
              They all have <codeInline>Switch</codeInline> methods that behave like switch statements and <codeInline>Convert</codeInline> methods
              that behave like switch expressions. The difference is that the <codeInline>Switch</codeInline> and <codeInline>Convert</codeInline> methods
              are limited to the .NET data types that the class can encapsulate.
            </para>
            <para>
              <codeInline>ContactID</codeInline>, <codeInline>Relation</codeInline> and <codeInline>DateAndOrTime</codeInline> support comparison for equality.
            </para>
          </content>
        </section>

        <section address="NamingConventions">
          <title>Naming Conventions</title>
          <content>
            <para>
              Most properties of the <codeInline>VCard</codeInline> class are collections. It has to do with that many
              properties are allowed to have more than one
              instance per vCard (e.g. phone numbers, e-mail addresses). Such properties are named in Plural.
            </para>
            <para>
              A special feature are properties whose name ends with "Views": These are properties that actually is only
              one instance allowed, but vCard 4.0 allows to have different versions of that single instance
              (e.g., in different languages). The same `AltID` parameter has to be set on each instance.
            </para>
            <para>
              Most classes derived from <codeInline>VCardProperty</codeInline> implement <codeInline>IEnumerable&lt;T&gt;</codeInline>
              in order to be assignable to collection properties without having to be wrapped in an Array or List.
            </para>
          </content>
        </section>
      </sections>
    </section>

    <section address="Fluent_APIs">
      <title>Efficient building and editing of VCard objects using Fluent APIs</title>
      <content>
        <para>
          The <codeInline>VCardBuilder</codeInline> class provides a fluent API for building and editing VCard objects. 
          Since <codeInline>Name</codeInline> and <codeInline>Address</codeInline> are also complicated classes, the classes
          <codeInline>NameBuilder</codeInline> and <codeInline>AddressBuilder</codeInline>
          also exist to create instances of these classes using a Fluent API.
        </para>
        <para>
          The properties of the <codeInline>VCardBuilder</codeInline> class have the same names as those 
          of the VCard class. Each of these
          properties gets a struct that provides methods to edit the corresponding VCard property.
          Each of these methods return this struct so that the calls can be chained.
        </para>
        <para>
          The <codeInline>VCardBuilder.Create</codeInline> method overloads initialize a VCardBuilder, 
          which creates a new
          VCard instance or edits an existing one. The <codeInline>VCardBuilder.VCard</codeInline> property gets the VCard
          object that the VCardBuilder created or manipulated.
        </para>
        <para>
          VCardBuilder doesn't throw exceptions and makes the most from the input arguments. If strong
          input validation is required, the model classes can be instantiated separately and used with
          VCardBuilder.
        </para>
      </content>
    </section>

    <section address="ExtensionMethods">
      <title>Extension methods</title>
      <content>
        <para>
        The namespace <codeInline>FolkerKinzel.VCards.Extensions</codeInline> contains several extension methods 
        that makes working with VCard objects
        more efficient and less error prone. It's recommended to publish this namespace when working with this
        library.
        </para>
        <para>
          The methods are helpful in the following cases:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              Most of the properties of the VCard class are of a specialized Type of <codeInline>IEnumerable&lt;VCardProperty?&gt;?</codeInline>.
              Extension methods encapsulate most of the necessary null checking and Linq operations that are needed to retrieve the 
              relevant data from these properties, or to store something there.
            </para>
          </listItem>
          <listItem>
            <para>
              Some operations work with collections of <codeInline>VCard</codeInline> objects (e.g., saving several VCard objects together in a common VCF file).
              Extension methods allow these operations to be performed directly on these collections.
            </para>
          </listItem>
          <listItem>
            <para>
              Most of the enums are Flags enums and most of the .NET properties with enum Types use the <codeInline>
                Nullable&lt;T&gt;
              </codeInline> variant of these
              enums. Extension methods help to savely evaluate and manipulate these nullable enum values.
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section address="VcfClass">
      <title>Parsing and serializing VCF files using the Vcf class</title>
      <content>
        <para>
          The <codeInline>Vcf</codeInline> class is a static class that contains a lot of methods for serializing and 
          parsing <codeInline>VCard</codeInline> objects to or from VCF files.
        </para>
      </content>
    </section>

    <section address="DataSynchronization">
      <title>The vCard 4.0 data synchronization mechanism</title>
      <content>
        <para>
          With the vCard 4.0 standard a data synchronization mechanism using PID parameters and CLIENTPIDMAP
          properties has been introduced. For this to work fully automatically, only two lines of code are
          required:
        </para>
        <code>
          // Registering the executing application with the VCard class is a technical requirement
          // when using the data synchronization mechanism introduced with vCard 4.0 (PID and
          // CLIENTPIDMAP). To do this, call the static method VCard.RegisterApp with an absolute
          // Uri once when the application starts. (UUID URNs are ideal for this.)
          VCard.RegisterApp(new Uri("urn:uuid:53e374d9-337e-4727-8803-a1e9c14e0556"));

          //Write a vCard 4.0 with the option VcfOptions.SetPropertyIDs:
          Vcf.Save(vCard,
                   filePath,
                   VCdVersion.V4_0,
                   options: Opts.Default.Set(Opts.SetPropertyIDs));
        </code>
      </content>
    </section>

    <section address="ReadingTheDocumentation">
      <title>Reading the Project Reference</title>
      <content>
        <para>
          Uppercase words, which are often found at the beginning of the documentation for a .NET property, are identifiers from the vCard standard.
          Digits in brackets,
          which can be found at the end of the documentation for a .NET property, e.g. <literal>(2,3,4)</literal>, describe which with vCard standard
          the content of the .NET property is compatible.
        </para>
        <para>
          The digits have the following meaning:
        </para>
        <list class="bullet">
          <listItem>
            <para>
              <codeInline>2</codeInline>: vCard 2.1,
            </para>
          </listItem>
          <listItem>
            <para>
              <codeInline>3</codeInline>: vCard 3.0
            </para>
          </listItem>
          <listItem>
            <para>
              <codeInline>4</codeInline>: vCard 4.0
            </para>
          </listItem>
        </list>
      </content>
    </section>

    <section address="VcardStandard">
      <title>The vCard Standard</title>
      <content>
        <para>The vCard standard is defined in the following documents:</para>

        <list class="bullet">
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 6350 (vCard 4.0)</linkText>
                <linkUri>https://tools.ietf.org/html/rfc6350</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 2426 (vCard 3.0)</linkText>
                <linkUri>https://tools.ietf.org/html/rfc2426</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>vCard.The Electronic Business Card.Version 2.1 (vCard 2.1)</linkText>
                <linkUri>https://web.archive.org/web/20120501162958/http://www.imc.org/pdi/vcard-21.doc</linkUri>
              </externalLink>
            </para>
          </listItem>
        </list>

        <para>Extensions of the standard describe e.g. the following documents:</para>

        <list class="bullet">
          <listItem>
          <para>
            <externalLink>
              <linkText>RFC 9555: JSContact: Converting from and to vCard</linkText>
              <linkUri>https://datatracker.ietf.org/doc/html/rfc9555</linkUri>
            </externalLink>
          </para>
        </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 9554: vCard Format Extensions for JSContact</linkText>
                <linkUri>https://datatracker.ietf.org/doc/html/rfc9554</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 8605: vCard Format Extensions: ICANN Extensions for the Registration Data Access Protocol (RDAP)</linkText>
                <linkUri>https://datatracker.ietf.org/doc/html/rfc8605</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 6868: vCard Format Extensions: ICANN Extensions for the Registration Data Access Protocol (RDAP)</linkText>
                <linkUri>https://datatracker.ietf.org/doc/html/rfc6868</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>
                  RFC 6715: vCard Format Extensions: Representing vCard Extensions Defined by the Open Mobile Alliance (OMA) Converged Address Book (CAB) Group
                </linkText>
                <linkUri>https://datatracker.ietf.org/doc/html/rfc6715</linkUri>
              </externalLink>
            </para>
          </listItem>
 
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 6474: vCard Format Extensions: Place of Birth, Place and Date of Death</linkText>
                <linkUri>https://tools.ietf.org/html/rfc6474</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>
                  RFC 6715: vCard Format Extensions: Representing vCard Extensions Defined by the Open Mobile
                  Alliance (OMA) Converged Address Book (CAB) Group
                </linkText>
                <linkUri>https://tools.ietf.org/html/rfc6715</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 6473: vCard KIND: application</linkText>
                <linkUri>https://tools.ietf.org/html/rfc6473</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 4770: vCard Extensions for Instant Messaging (IM)</linkText>
                <linkUri>https://tools.ietf.org/html/rfc4770</linkUri>
              </externalLink>
            </para>
          </listItem>
          <listItem>
            <para>
              <externalLink>
                <linkText>RFC 2739: Calendar Attributes for vCard and LDAP</linkText>
                <linkUri>https://tools.ietf.org/html/rfc2739</linkUri>
              </externalLink>
            </para>
          </listItem>
        </list>
      </content>
    </section>




    <relatedTopics></relatedTopics>

  </developerConceptualDocument>
</topic>
